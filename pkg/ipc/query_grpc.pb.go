// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/ipc/query.proto

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Command_CreateStream_FullMethodName = "/ipc.Command/CreateStream"
	Command_Submit_FullMethodName       = "/ipc.Command/Submit"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Command is a service to send new commands.
type CommandClient interface {
	CreateStream(ctx context.Context, in *CreateStreamIn, opts ...grpc.CallOption) (*CreateStreamOut, error)
	// Submit creates a new event within the specified stream.
	Submit(ctx context.Context, in *SubmitIn, opts ...grpc.CallOption) (*SubmitOut, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) CreateStream(ctx context.Context, in *CreateStreamIn, opts ...grpc.CallOption) (*CreateStreamOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamOut)
	err := c.cc.Invoke(ctx, Command_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Submit(ctx context.Context, in *SubmitIn, opts ...grpc.CallOption) (*SubmitOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitOut)
	err := c.cc.Invoke(ctx, Command_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility.
//
// *
// Command is a service to send new commands.
type CommandServer interface {
	CreateStream(context.Context, *CreateStreamIn) (*CreateStreamOut, error)
	// Submit creates a new event within the specified stream.
	Submit(context.Context, *SubmitIn) (*SubmitOut, error)
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandServer struct{}

func (UnimplementedCommandServer) CreateStream(context.Context, *CreateStreamIn) (*CreateStreamOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedCommandServer) Submit(context.Context, *SubmitIn) (*SubmitOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}
func (UnimplementedCommandServer) testEmbeddedByValue()                 {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	// If the following call pancis, it indicates UnimplementedCommandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).CreateStream(ctx, req.(*CreateStreamIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Submit(ctx, req.(*SubmitIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _Command_CreateStream_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Command_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/ipc/query.proto",
}

const (
	Query_ListStreams_FullMethodName = "/ipc.Query/ListStreams"
	Query_Get_FullMethodName         = "/ipc.Query/Get"
	Query_Query_FullMethodName       = "/ipc.Query/Query"
	Query_Watch_FullMethodName       = "/ipc.Query/Watch"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Query is a service to retrieve data from the system.  Query servers may be behind Command services for device
// submission.
type QueryClient interface {
	ListStreams(ctx context.Context, in *ListStreamsIn, opts ...grpc.CallOption) (*ListStreamsOut, error)
	// *
	// Get retrieves a single event from the system.
	Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error)
	// *
	// Query initiates a stream of events matching the target query.  QueryIn contains a set of clauses with handler tags
	// which will return a set of QueryOut events.
	Query(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOut], error)
	Watch(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOut], error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ListStreams(ctx context.Context, in *ListStreamsIn, opts ...grpc.CallOption) (*ListStreamsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsOut)
	err := c.cc.Invoke(ctx, Query_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOut)
	err := c.cc.Invoke(ctx, Query_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Query(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[0], Query_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryIn, QueryOut]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_QueryClient = grpc.ServerStreamingClient[QueryOut]

func (c *queryClient) Watch(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[1], Query_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryIn, QueryOut]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_WatchClient = grpc.ServerStreamingClient[QueryOut]

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// *
// Query is a service to retrieve data from the system.  Query servers may be behind Command services for device
// submission.
type QueryServer interface {
	ListStreams(context.Context, *ListStreamsIn) (*ListStreamsOut, error)
	// *
	// Get retrieves a single event from the system.
	Get(context.Context, *GetIn) (*GetOut, error)
	// *
	// Query initiates a stream of events matching the target query.  QueryIn contains a set of clauses with handler tags
	// which will return a set of QueryOut events.
	Query(*QueryIn, grpc.ServerStreamingServer[QueryOut]) error
	Watch(*QueryIn, grpc.ServerStreamingServer[QueryOut]) error
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) ListStreams(context.Context, *ListStreamsIn) (*ListStreamsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedQueryServer) Get(context.Context, *GetIn) (*GetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQueryServer) Query(*QueryIn, grpc.ServerStreamingServer[QueryOut]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryServer) Watch(*QueryIn, grpc.ServerStreamingServer[QueryOut]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListStreams(ctx, req.(*ListStreamsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Get(ctx, req.(*GetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Query(m, &grpc.GenericServerStream[QueryIn, QueryOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_QueryServer = grpc.ServerStreamingServer[QueryOut]

func _Query_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Watch(m, &grpc.GenericServerStream[QueryIn, QueryOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_WatchServer = grpc.ServerStreamingServer[QueryOut]

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreams",
			Handler:    _Query_ListStreams_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Query_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Query_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Query_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/ipc/query.proto",
}
